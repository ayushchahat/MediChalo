const Medicine = require('../models/Medicine');
const { validate, medicineSchema } = require('../middleware/validationMiddleware');
const csv = require('csv-parser');
const fs = require('fs');

// @desc    Add a new medicine to inventory, now with image upload support.
// @route   POST /api/inventory
// @access  Private (Pharmacy)
const addMedicine = [
    // Note: Joi validation for file uploads requires more complex setup.
    // We rely on Multer's fileFilter for basic type checking.
    // validate(medicineSchema), 
    async (req, res) => {
        try {
            const { name, batchNumber, expiryDate, quantity, price, prescriptionRequired } = req.body;

            const newMedicine = new Medicine({
                pharmacy: req.user._id,
                name,
                batchNumber,
                expiryDate,
                quantity,
                price,
                prescriptionRequired: prescriptionRequired === 'true', // Ensure boolean conversion
                // UPDATED: Save the path of the uploaded image file if it exists.
                // The path is generated by the 'storage' engine in your uploadMiddleware.
                image: req.file ? req.file.path : undefined
            });

            const createdMedicine = await newMedicine.save();
            res.status(201).json(createdMedicine);
        } catch (error) {
            console.error("ADD MEDICINE ERROR:", error);
            res.status(500).json({ message: 'Server Error' });
        }
    }
];

// @desc    Get all medicines for the logged-in pharmacy's inventory page.
// @route   GET /api/inventory
// @access  Private (Pharmacy)
const getInventory = async (req, res) => {
    try {
        const medicines = await Medicine.find({ pharmacy: req.user._id }).sort({ createdAt: -1 });
        res.json(medicines);
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
};

// NEW: Get all medicines with stock > 0 for the customer storefront.
// @desc    Get all available medicines for customers.
// @route   GET /api/inventory/available
// @access  Private (Customer)
const getAvailableMedicines = async (req, res) => {
    try {
        // Find all medicines with a quantity greater than 0.
        const medicines = await Medicine.find({ quantity: { $gt: 0 } })
            // Populate the pharmacy details to show the shop name to the customer.
            .populate({
                path: 'pharmacy',
                select: 'pharmacyProfile', // We only need the nested pharmacyProfile
                populate: {
                    path: 'pharmacyProfile',
                    select: 'shopName' // Specifically get the shopName
                }
            });
        res.json(medicines);
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
};


// @desc    Update a specific medicine's details.
// @route   PUT /api/inventory/:id
// @access  Private (Pharmacy)
const updateMedicine = async (req, res) => {
    try {
        const medicine = await Medicine.findById(req.params.id);

        if (medicine && medicine.pharmacy.toString() === req.user._id.toString()) {
            // Update fields if they are provided in the request body
            Object.assign(medicine, req.body);
            const updatedMedicine = await medicine.save();
            res.json(updatedMedicine);
        } else {
            res.status(404).json({ message: 'Medicine not found or not authorized' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
};

// @desc    Delete a medicine from the inventory.
// @route   DELETE /api/inventory/:id
// @access  Private (Pharmacy)
const deleteMedicine = async (req, res) => {
    try {
        const medicine = await Medicine.findById(req.params.id);

        if (medicine && medicine.pharmacy.toString() === req.user._id.toString()) {
            await medicine.deleteOne();
            res.json({ message: 'Medicine removed successfully' });
        } else {
            res.status(404).json({ message: 'Medicine not found or not authorized' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
};


// @desc    Allow customers to search for medicines by name.
// @route   GET /api/inventory/search
// @access  Private (Customer)
const searchMedicines = async (req, res) => {
    const keyword = req.query.keyword ? {
        name: {
            $regex: req.query.keyword,
            $options: 'i' // case-insensitive search
        }
    } : {};

    try {
        const medicines = await Medicine.find({ ...keyword, quantity: { $gt: 0 } });
        res.json(medicines);
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
};

// @desc    Handle bulk upload of medicines from a CSV file.
// @route   POST /api/inventory/bulk-upload
// @access  Private (Pharmacy)
const bulkUpload = (req, res) => {
    if (!req.file) {
        return res.status(400).json({ message: 'No CSV file uploaded.' });
    }

    const results = [];
    fs.createReadStream(req.file.path)
        .pipe(csv())
        .on('data', (data) => results.push(data))
        .on('end', async () => {
            try {
                const medicinesToInsert = results.map(item => ({
                    ...item,
                    pharmacy: req.user._id,
                    prescriptionRequired: item.prescriptionRequired?.toLowerCase() === 'true'
                }));
                await Medicine.insertMany(medicinesToInsert);
                fs.unlinkSync(req.file.path); // Clean up by deleting the uploaded file
                res.status(201).json({ message: `${results.length} medicines added successfully.` });
            } catch (error) {
                fs.unlinkSync(req.file.path);
                res.status(500).json({ message: 'Error processing CSV file.' });
            }
        });
};


module.exports = {
    addMedicine,
    getInventory,
    updateMedicine,
    deleteMedicine,
    searchMedicines,
    bulkUpload,
    getAvailableMedicines
};

